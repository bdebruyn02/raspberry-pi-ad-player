name: 'publish-arm64'

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      # 1️ Setup Node 22
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # 2️ Install Rust stable and ARM64 target
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      # 3️ Install Ubuntu build + cross deps
      - name: Install system dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl pkg-config patchelf \
            libssl-dev:arm64 libsqlite3-dev:arm64 \
            libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64 \
            libayatana-appindicator3-dev:arm64 librsvg2-dev:arm64 \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross

      # 4️ Configure cross-compilation environment
      - name: Configure ARM64 toolchain
        run: |
          echo "Setting up cross-compilation environment..."
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      # 5️ Install frontend deps
      - name: Install frontend dependencies
        run: npm ci

      # 6️ Build Angular frontend
      - name: Build Angular app
        run: npm run build

      # 7️ Install Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli

      # 8️ Build .deb for Raspberry Pi (ARM64)
      - name: Build .deb package
        run: |
          echo "Building ARM64 .deb package..."
          npm run build:pi

      # 9️ Upload artifact or publish release
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'MediaScheduler v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: '--target aarch64-unknown-linux-gnu --bundles deb'
